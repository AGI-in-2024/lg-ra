#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Drive
–ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥ –¥–ª—è junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import os
import pathlib
import gdown
import json
from typing import Dict, List

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG = {
    "google_drive_folder_url": "https://drive.google.com/drive/folders/1OAECK_1YX0NCqcTLMewNZRgoPKCKYfgt",
    "input_pdf_count": 20,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ PDF –¥–ª—è –ø–∞–ø–∫–∏ input
    "predict_pdf_count": 1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ PDF –¥–ª—è –ø–∞–ø–∫–∏ topredict
    "download_timeout": 60   # –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

class DataDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Drive"""
    
    def __init__(self, config: Dict = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        self.config = config or DEFAULT_CONFIG
        
        # –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
        self.base_dir = pathlib.Path("data/dataset2")
        self.input_dir = self.base_dir / "input"
        self.topredict_dir = self.base_dir / "topredict"
        self.temp_dir = self.base_dir / "temp"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        self.create_directories()
        
        print("‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏"""
        directories = [self.input_dir, self.topredict_dir, self.temp_dir]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {directory}")
    
    def extract_folder_id(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–∞–ø–∫–∏ –∏–∑ URL Google Drive"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL –≤–∏–¥–∞: https://drive.google.com/drive/folders/FOLDER_ID
            if "folders/" in url:
                folder_id = url.split("folders/")[1].split("?")[0]
                return folder_id
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL Google Drive –ø–∞–ø–∫–∏")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –ø–∞–ø–∫–∏: {e}")
            return None
    
    def download_folder(self, folder_url: str) -> bool:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å Google Drive"""
        try:
            folder_id = self.extract_folder_id(folder_url)
            if not folder_id:
                return False
            
            print(f"üîó –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å ID: {folder_id}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞–ø–∫—É –≤ temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            download_path = str(self.temp_dir)
            
            try:
                gdown.download_folder(
                    id=folder_id,
                    output=download_path,
                    quiet=False,
                    use_cookies=False
                )
                print("‚úÖ –ü–∞–ø–∫–∞ —Å–∫–∞—á–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ gdown: {e}")
                print("üí° –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                return self.download_folder_alternative(folder_id)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
    
    def download_folder_alternative(self, folder_id: str) -> bool:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ zip –∞—Ä—Ö–∏–≤
            zip_url = f"https://drive.google.com/uc?id={folder_id}&export=download"
            output_file = self.temp_dir / "downloaded_folder.zip"
            
            print(f"üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞...")
            gdown.download(zip_url, str(output_file), quiet=False)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            import zipfile
            with zipfile.ZipFile(output_file, 'r') as zip_ref:
                zip_ref.extractall(self.temp_dir)
            
            # –£–¥–∞–ª—è–µ–º zip —Ñ–∞–π–ª
            output_file.unlink()
            
            print("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
            return False
    
    def find_pdf_files(self) -> List[pathlib.Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ PDF —Ñ–∞–π–ª—ã –≤ —Å–∫–∞—á–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ"""
        pdf_files = []
        
        # –ò—â–µ–º PDF —Ñ–∞–π–ª—ã –≤ temp –ø–∞–ø–∫–µ
        for pdf_file in self.temp_dir.rglob("*.pdf"):
            pdf_files.append(pdf_file)
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
        return pdf_files
    
    def organize_files(self, pdf_files: List[pathlib.Path]) -> bool:
        """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º"""
        try:
            if len(pdf_files) == 0:
                print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å–∫–∞—á–∞–Ω–æ
            total_files = len(pdf_files)
            input_count = min(self.config["input_pdf_count"], total_files - 1)  # –û—Å—Ç–∞–≤–ª—è–µ–º 1 –¥–ª—è predict
            predict_count = min(self.config["predict_pdf_count"], total_files - input_count)
            
            print(f"üìä –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤:")
            print(f"   - –í –ø–∞–ø–∫—É input: {input_count} —Ñ–∞–π–ª–æ–≤")
            print(f"   - –í –ø–∞–ø–∫—É topredict: {predict_count} —Ñ–∞–π–ª–æ–≤")
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ input
            for i in range(input_count):
                source_file = pdf_files[i]
                target_file = self.input_dir / f"research_paper_{i+1:02d}.pdf"
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                import shutil
                shutil.copy2(source_file, target_file)
                print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {target_file.name}")
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ topredict
            for i in range(predict_count):
                source_file = pdf_files[input_count + i]
                target_file = self.topredict_dir / f"validation_paper_{i+1:02d}.pdf"
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                import shutil
                shutil.copy2(source_file, target_file)
                print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {target_file.name}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def cleanup_temp(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        try:
            import shutil
            if self.temp_dir.exists():
                shutil.rmtree(self.temp_dir)
                print("üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏: {e}")
    
    def create_sample_report(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        report_file = self.input_dir / "hierarchical_research_report.json"
        
        if report_file.exists():
            print("üìä –û—Ç—á–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞
        sample_report = {
            "timestamp": "2025-01-24T12:00:00.000000",
            "total_programs": 1,
            "programs": [
                {
                    "program_title": "–í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è",
                    "program_summary": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
                    "subgroups": [
                        {
                            "subgroup_type": "–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                            "subgroup_description": "–ê–Ω–∞–ª–∏–∑ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                            "directions": [
                                {
                                    "rank": 1,
                                    "title": "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã —Å—Ç–∞—Ä–µ–Ω–∏—è",
                                    "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å—Ç–∞—Ä–µ–Ω–∏—è –Ω–∞ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
                                    "research_type": "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
                                    "critique": {
                                        "is_interesting": True,
                                        "novelty_score": 8.5,
                                        "impact_score": 9.0,
                                        "feasibility_score": 7.5,
                                        "final_score": 8.3,
                                        "recommendation": "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        }
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(sample_report, f, ensure_ascii=False, indent=2)
            print("üìä –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def run_download(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {self.config['google_drive_folder_url']}")
        
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞–ø–∫—É
        success = self.download_folder(self.config["google_drive_folder_url"])
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
        
        # 2. –ù–∞—Ö–æ–¥–∏–º PDF —Ñ–∞–π–ª—ã
        pdf_files = self.find_pdf_files()
        if not pdf_files:
            print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # 3. –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —Ñ–∞–π–ª—ã
        success = self.organize_files(pdf_files)
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã")
            return False
        
        # 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞
        self.create_sample_report()
        
        # 5. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.cleanup_temp()
        
        print("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True


def load_config() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    config_file = pathlib.Path("download_config.json")
    
    if config_file.exists():
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ {config_file}")
            return config
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    return DEFAULT_CONFIG


def save_config(config: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
    config_file = pathlib.Path("download_config.json")
    
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì¶ –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import gdown
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ gdown –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install gdown")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    downloader = DataDownloader(config)
    success = downloader.run_download()
    
    if success:
        print("\nüéâ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏!")
        print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print("   - data/dataset2/input/ - —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        print("   - data/dataset2/topredict/ - —Ñ–∞–π–ª—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é: python run_validation.py")
    else:
        print("\n‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")


if __name__ == "__main__":
    main()

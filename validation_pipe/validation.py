#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ PDF —Å—Ç–∞—Ç–µ–π
–ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥ –¥–ª—è junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import os
import json
import pathlib
from datetime import datetime
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API
try:
    from google import genai
    from google.genai import types
    GENAI_AVAILABLE = True
except ImportError:
    print("‚ùå google-genai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-genai")
    GENAI_AVAILABLE = False

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()


class ValidationResult:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    def __init__(self):
        self.timestamp = datetime.now().isoformat()
        self.validation_status = "unknown"
        self.confidence_score = 0.0
        self.matches_found = []
        self.discrepancies = []
        self.summary = ""
        self.recommendations = []


class ReportValidator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        self.api_key = os.getenv('GOOGLE_API_KEY')
        if not self.api_key:
            raise ValueError(
                "‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! "
                "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á: https://makersuite.google.com/app/apikey"
            )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Gemini
        if GENAI_AVAILABLE:
            self.client = genai.Client(api_key=self.api_key)
        else:
            raise ImportError("google-genai –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
        self.data_dir = pathlib.Path("data/dataset2")
        self.input_dir = self.data_dir / "input"
        self.topredict_dir = self.data_dir / "topredict"
        self.results_dir = pathlib.Path("results")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.results_dir.mkdir(exist_ok=True)
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_research_report(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç hierarchical_research_report.json –∏–∑ –ø–∞–ø–∫–∏ input"""
        report_path = self.input_dir / "hierarchical_research_report.json"
        
        if not report_path.exists():
            print(f"‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {report_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ PDF —Ñ–∞–π–ª—ã –≤ input –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            pdf_files = list(self.input_dir.glob("*.pdf"))
            if pdf_files:
                print(f"üí° –ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤ –≤ input")
                print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python downlaod_init_data.py")
                print("   –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ PDF —Ñ–∞–π–ª–æ–≤")
            
            return None
        
        try:
            with open(report_path, 'r', encoding='utf-8') as f:
                report = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç —Å {report.get('total_programs', 0)} –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏")
            return report
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def convert_predictions_to_md(self, report: Dict) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JSON –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —É–¥–æ–±–Ω—ã–π MD —Ñ–æ—Ä–º–∞—Ç"""
        md_content = "# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É - hierarchical –∏–ª–∏ research_report
        if 'programs' in report:
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ hierarchical_research_report.json
            for program in report.get('programs', []):
                md_content += f"## {program.get('program_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
                md_content += f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:** {program.get('program_summary', '')}\n\n"
                
                for subgroup in program.get('subgroups', []):
                    md_content += f"### {subgroup.get('subgroup_type', '–ü–æ–¥–≥—Ä—É–ø–ø–∞')}\n\n"
                    md_content += f"{subgroup.get('subgroup_description', '')}\n\n"
                    
                    for direction in subgroup.get('directions', []):
                        rank = direction.get('rank', 0)
                        title = direction.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        description = direction.get('description', '')
                        
                        md_content += f"#### –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {rank}: {title}\n\n"
                        md_content += f"{description}\n\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                        critique = direction.get('critique', {})
                        if critique:
                            md_content += "**–û—Ü–µ–Ω–∫–∞:**\n"
                            md_content += f"- –ù–æ–≤–∏–∑–Ω–∞: {critique.get('novelty_score', 0)}\n"
                            md_content += f"- –í–ª–∏—è–Ω–∏–µ: {critique.get('impact_score', 0)}\n"
                            md_content += f"- –û—Å—É—â–µ—Å—Ç–≤–∏–º–æ—Å—Ç—å: {critique.get('feasibility_score', 0)}\n"
                            md_content += f"- –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {critique.get('final_score', 0)}\n\n"
                        
                        md_content += "---\n\n"
        
        elif 'directions' in report:
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ research_report.json
            md_content += f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:** {report.get('total_directions', 0)}\n\n"
            
            for direction in report.get('directions', [])[:10]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
                rank = direction.get('rank', 0)
                title = direction.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                description = direction.get('description', '')
                
                md_content += f"## –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {rank}: {title}\n\n"
                md_content += f"{description}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å—Ç–∞—Ç—å–∏
                papers = direction.get('supporting_papers', [])
                if papers:
                    md_content += f"**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å—Ç–∞—Ç—å–∏:** {', '.join(papers)}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                critique = direction.get('critique', {})
                if critique:
                    md_content += "**–û—Ü–µ–Ω–∫–∞:**\n"
                    md_content += f"- –ù–æ–≤–∏–∑–Ω–∞: {critique.get('novelty_score', 0)}\n"
                    md_content += f"- –í–ª–∏—è–Ω–∏–µ: {critique.get('impact_score', 0)}\n"
                    md_content += f"- –û—Å—É—â–µ—Å—Ç–≤–∏–º–æ—Å—Ç—å: {critique.get('feasibility_score', 0)}\n"
                    md_content += f"- –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {critique.get('final_score', 0)}\n"
                    md_content += f"- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {critique.get('recommendation', '–ù–µ—Ç')}\n\n"
                
                md_content += "---\n\n"
        
        return md_content
    
    def find_pdf_files(self) -> List[pathlib.Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ topredict"""
        pdf_files = list(self.topredict_dir.glob("*.pdf"))
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤")
        return pdf_files
    
    def extract_key_info_from_pdf(self, pdf_path: pathlib.Path) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç IRP (–ò–¥–µ–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ü—Ä–æ–≥—Ä–∞–º–º—É) –∏–∑ PDF —Å—Ç–∞—Ç—å–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º PDF —Ñ–∞–π–ª
            pdf_data = pdf_path.read_bytes()
            print(f"üìä –†–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞: {len(pdf_data)} –±–∞–π—Ç")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è IRP —Å–æ–≥–ª–∞—Å–Ω–æ –±–µ–Ω—á–º–∞—Ä–∫—É
            prompt = """
            –ò–∑–≤–ª–µ–∫–∏ –∏–∑ –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –ø–æ–ª–Ω—É—é –ò–¥–µ–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ü—Ä–æ–≥—Ä–∞–º–º—É (IRP).
            –≠—Ç–æ —Ç–æ, –∫–∞–∫ –±—ã –≤—ã–≥–ª—è–¥–µ–ª –≥—Ä–∞–Ω—Ç –∏–ª–∏ –ø–ª–∞–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ–ª –∫ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ.
            
            –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
            
            1. –ü–†–û–ë–õ–ï–ú–ê –ò –ö–û–ù–¢–ï–ö–°–¢ (Problem & Context):
               - –ù–∞—É—á–Ω—ã–π –ø—Ä–æ–±–µ–ª (Knowledge Gap): –ö–∞–∫–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∑–Ω–∞–Ω–∏–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –¥–æ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏?
               - –ö–ª—é—á–µ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞ (Overarching Theme): –í –∫–∞–∫–æ–π –±–æ–ª—å—à–æ–π –Ω–∞—É—á–Ω–æ–π —Ç–µ–º–µ –ª–µ–∂–∏—Ç —Ä–∞–±–æ—Ç–∞?
            
            2. –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ì–ò–ü–û–¢–ï–ó–ê (Core Hypothesis):
               - –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
               - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –¥–æ–∫–∞–∑–∞—Ç—å
            
            3. –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø (Key Research Components):
               - –û–±—ä–µ–∫—Ç—ã (Entities): –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–ª–µ–∫—É–ª—ã/–≥–µ–Ω—ã/–±–µ–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –∏–∑—É—á–∏—Ç—å
               - –ú–µ—Ö–∞–Ω–∏–∑–º—ã (Mechanisms): –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å  
               - –°–∏—Å—Ç–µ–º—ã (Systems): –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–∫–ª–µ—Ç–æ—á–Ω—ã–µ –ª–∏–Ω–∏–∏, –∂–∏–≤–æ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Ç–∫–∞–Ω–∏)
            
            4. –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–û–î–´ (Essential Methods):
               - –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤, –±–µ–∑ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–µ –±—ã–ª–æ –±—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
               - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
            
            5. –ì–õ–ê–í–ù–´–ô –í–´–í–û–î –ò –í–ö–õ–ê–î (Main Finding & Impact):
               - –ö—Ä–∞—Ç–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
               - –ó–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–ª—è –Ω–∞—É–∫–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω—ã
               - –ö–∞–∫ —ç—Ç–æ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            
            –û—Ç–≤–µ—á–∞–π –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —á–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è—è –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª.
            –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º - —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
            """
            
            print(f"üìù –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Gemini 2.0 Flash...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini 2.0 Flash
            response = self.client.models.generate_content(
                model="gemini-2.0-flash",
                contents=[
                    types.Part.from_bytes(data=pdf_data, mime_type='application/pdf'),
                    prompt
                ]
            )
            
            print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API")
            print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìã –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:")
            print(f"'{response.text[:500]}...'")
            
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∞ IRP –∏–∑ {pdf_path.name}")
            return response.text
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –∏–∑–≤–ª–µ—á–µ–Ω–∏—è IRP –∏–∑ PDF {pdf_path.name}:")
            print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"   –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {str(e)}")
            import traceback
            print(f"   Traceback: {traceback.format_exc()}")
            return ""
    
    def validate_predictions_vs_paper(self, predictions_md: str, paper_info: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ—Ç–∏–≤ IRP –∏–∑ —Å—Ç–∞—Ç—å–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        result = ValidationResult()
        
        print(f"üìä –†–∞–∑–º–µ—Ä PRP (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è): {len(predictions_md)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìä –†–∞–∑–º–µ—Ä IRP (–∏–∑ —Å—Ç–∞—Ç—å–∏): {len(paper_info)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        try:
            validation_prompt = f"""
            –í—ã–ø–æ–ª–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º (PRP) –ø—Ä–æ—Ç–∏–≤ 
            –∏–¥–µ–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (IRP) –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏.
            
            –ü–†–ï–î–°–ö–ê–ó–ê–ù–ù–´–ï –ü–†–û–ì–†–ê–ú–ú–´ (PRP):
            {predictions_md[:5000]}
            
            –ò–î–ï–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –ò–ó –°–¢–ê–¢–¨–ò (IRP):
            {paper_info[:4000]}
            
            –ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò (—Å–æ–≥–ª–∞—Å–Ω–æ Research Program Prediction Benchmark):
            
            1. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ì–ò–ü–û–¢–ï–ó–´ (Hypothesis Match) - –æ—Ü–µ–Ω–∫–∞ 0-5:
               0 = –ù–µ—Ç —Å–≤—è–∑–∏
               1 = –û—á–µ–Ω—å —Å–ª–∞–±–∞—è —Å–≤—è–∑—å
               2 = –°–ª–∞–±–∞—è —Å–≤—è–∑—å 
               3 = –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
               4 = –ë–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
               5 = –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã
            
            2. –ü–û–õ–ù–û–¢–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í (Component Recall) - –ø—Ä–æ—Ü–µ–Ω—Ç—ã:
               - –û–±—ä–µ–∫—Ç—ã: % –∫–ª—é—á–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–≥–µ–Ω—ã/–±–µ–ª–∫–∏/–º–æ–ª–µ–∫—É–ª—ã) –∏–∑ IRP, —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ PRP
               - –ú–µ—Ö–∞–Ω–∏–∑–º—ã: % –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∏–∑ IRP, —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ PRP  
               - –ú–µ—Ç–æ–¥—ã: % –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑ IRP, —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ PRP
            
            3. –ö–ê–ß–ï–°–¢–í–û –ü–õ–ê–ù–ê (Plan Quality) - –æ—Ü–µ–Ω–∫–∞ 0-5:
               –ù–∞—Å–∫–æ–ª—å–∫–æ –ª–æ–≥–∏—á–µ–Ω –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è?
               –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –º–µ—Ç–æ–¥—ã –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º?
            
            4. –¢–û–ß–ù–û–°–¢–¨ –ö–û–ù–¢–ï–ö–°–¢–ê (Context Accuracy) - –æ—Ü–µ–Ω–∫–∞ 0-5:
               –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ PRP –æ–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞—É—á–Ω—ã–π –ø—Ä–æ–±–µ–ª –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥,
               –∫–∞–∫ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ IRP?
            
            5. –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï (Ranking):
               –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ PRP –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç IRP?
               –£–∫–∞–∑–∞—Ç—å –µ–≥–æ —Ä–∞–Ω–≥/–ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
            
            –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
            –°–¢–ê–¢–£–°: [–¢–û–ß–ù–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï/–•–û–†–û–®–ï–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï/–ß–ê–°–¢–ò–ß–ù–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï/–°–õ–ê–ë–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï/–ù–ï–¢_–°–û–í–ü–ê–î–ï–ù–ò–Ø]
            
            –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï_–ì–ò–ü–û–¢–ï–ó–´: [0-5]
            –û–ë–™–ï–ö–¢–´_RECALL: [0-100%]
            –ú–ï–•–ê–ù–ò–ó–ú–´_RECALL: [0-100%]
            –ú–ï–¢–û–î–´_RECALL: [0-100%]
            –ö–ê–ß–ï–°–¢–í–û_–ü–õ–ê–ù–ê: [0-5]
            –¢–û–ß–ù–û–°–¢–¨_–ö–û–ù–¢–ï–ö–°–¢–ê: [0-5]
            –õ–£–ß–®–ò–ô_–†–ê–ù–ì: [–Ω–æ–º–µ—Ä –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è]
            
            –ù–ê–ô–î–ï–ù–ù–´–ï_–°–û–í–ü–ê–î–ï–ù–ò–Ø:
            [–¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π]
            
            –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï_–†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:
            [—Å–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π]
            
            –ò–¢–û–ì–û–í–ê–Ø_–û–¶–ï–ù–ö–ê:
            [–¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ]
            """
            
            print(f"üìù –†–∞–∑–º–µ—Ä validation –ø—Ä–æ–º–ø—Ç–∞: {len(validation_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é validation –∑–∞–ø—Ä–æ—Å –∫ Gemini 2.0 Flash...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini 2.0 Flash
            response = self.client.models.generate_content(
                model="gemini-2.0-flash",
                contents=[validation_prompt]
            )
            
            print(f"üì• –ü–æ–ª—É—á–µ–Ω validation –æ—Ç–≤–µ—Ç –æ—Ç API")
            print(f"üìä –†–∞–∑–º–µ—Ä validation –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìã –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ validation –æ—Ç–≤–µ—Ç–∞:")
            print(f"'{response.text[:1000]}...'")
            
            # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            response_text = response.text
            result.summary = response_text
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞...")
            if "–¢–û–ß–ù–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï" in response_text:
                result.validation_status = "exact_match"
                result.confidence_score = 0.95
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å: –¢–û–ß–ù–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï")
            elif "–•–û–†–û–®–ï–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï" in response_text:
                result.validation_status = "good_match"
                result.confidence_score = 0.85
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å: –•–û–†–û–®–ï–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï")
            elif "–ß–ê–°–¢–ò–ß–ù–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï" in response_text:
                result.validation_status = "partial_match"
                result.confidence_score = 0.65
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å: –ß–ê–°–¢–ò–ß–ù–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï")
            elif "–°–õ–ê–ë–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï" in response_text:
                result.validation_status = "weak_match"
                result.confidence_score = 0.45
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å: –°–õ–ê–ë–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï")
            elif "–ù–ï–¢_–°–û–í–ü–ê–î–ï–ù–ò–Ø" in response_text:
                result.validation_status = "no_match"
                result.confidence_score = 0.9
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å: –ù–ï–¢_–°–û–í–ü–ê–î–ï–ù–ò–Ø")
            else:
                result.validation_status = "unclear"
                result.confidence_score = 0.5
                print(f"‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: unclear")
                print(f"üîç –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ: {[s for s in ['–¢–û–ß–ù–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï', '–•–û–†–û–®–ï–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï', '–ß–ê–°–¢–ò–ß–ù–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï', '–°–õ–ê–ë–û–ï_–°–û–í–ü–ê–î–ï–ù–ò–ï', '–ù–ï–¢_–°–û–í–ü–ê–î–ï–ù–ò–Ø'] if s in response_text]}")
            
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.validation_status}")
            return result
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"   –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {str(e)}")
            import traceback
            print(f"   Traceback: {traceback.format_exc()}")
            result.validation_status = "error"
            result.summary = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
            return result
    
    def save_validation_result(self, result: ValidationResult, pdf_name: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –ø–∞–ø–∫—É results"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        result_filename = f"validation_{pdf_name}_{timestamp}.json"
        result_path = self.results_dir / result_filename
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        result_dict = {
            "timestamp": result.timestamp,
            "pdf_file": pdf_name,
            "validation_status": result.validation_status,
            "confidence_score": result.confidence_score,
            "matches_found": result.matches_found,
            "discrepancies": result.discrepancies,
            "summary": result.summary,
            "recommendations": result.recommendations
        }
        
        try:
            with open(result_path, 'w', encoding='utf-8') as f:
                json.dump(result_dict, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def run_validation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ Research Program Prediction Benchmark"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ RPPB (Research Program Prediction Benchmark)...")
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ (PRP)
        report = self.load_research_report()
        if not report:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏")
            return
        
        # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —É–¥–æ–±–Ω—ã–π MD —Ñ–æ—Ä–º–∞—Ç
        print("üìù –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (PRP) –≤ MD...")
        predictions_md = self.convert_predictions_to_md(report)
        
        # 3. –ù–∞—Ö–æ–¥–∏–º PDF —Ñ–∞–π–ª—ã —Å–æ —Å—Ç–∞—Ç—å—è–º–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        pdf_files = self.find_pdf_files()
        if not pdf_files:
            print("‚ùå PDF —Ñ–∞–π–ª—ã —Å–æ —Å—Ç–∞—Ç—å—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é
        for pdf_path in pdf_files:
            print(f"\nüìÑ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤: {pdf_path.name}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ò–¥–µ–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ü—Ä–æ–≥—Ä–∞–º–º—É (IRP) –∏–∑ —Å—Ç–∞—Ç—å–∏
            print("üîç –ò–∑–≤–ª–µ–∫–∞—é IRP (–ò–¥–µ–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ü—Ä–æ–≥—Ä–∞–º–º—É) –∏–∑ —Å—Ç–∞—Ç—å–∏...")
            paper_irp = self.extract_key_info_from_pdf(pdf_path)
            if not paper_irp:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å IRP –∏–∑ —Å—Ç–∞—Ç—å–∏")
                continue
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (PRP) —Å –∏–¥–µ–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π (IRP)
            print("‚öñÔ∏è –°—Ä–∞–≤–Ω–∏–≤–∞—é PRP vs IRP –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –±–µ–Ω—á–º–∞—Ä–∫–∞...")
            result = self.validate_predictions_vs_paper(predictions_md, paper_irp)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            self.save_validation_result(result, pdf_path.stem)
        
        print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ RPPB –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
        print("üéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'results/' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        validator = ReportValidator()
        validator.run_validation()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
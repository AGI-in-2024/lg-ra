# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive –ø–∞–ø–∫–∏
"""

import os
import io
import json
from pathlib import Path
from tqdm import tqdm
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
GOOGLE_DRIVE_FOLDER_ID = "1OAECK_1YX0NCqcTLMewNZRgoPKCKYfgt"
DOWNLOAD_FOLDER = "downloaded_pdfs"
SCOPES = ['https://www.googleapis.com/auth/drive.readonly']


def setup_download_folder():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    folder_path = Path(DOWNLOAD_FOLDER)
    folder_path.mkdir(exist_ok=True)
    print(f"‚úÖ –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {folder_path.absolute()}")
    return folder_path


def authenticate_google_drive():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Drive API"""
    credentials = None
    token_file = "token.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
    if os.path.exists(token_file):
        credentials = Credentials.from_authorized_user_file(token_file, SCOPES)
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ
    if not credentials or not credentials.valid:
        if credentials and credentials.expired and credentials.refresh_token:
            credentials.refresh(Request())
        else:
            # –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è credentials.json —Ñ–∞–π–ª –æ—Ç Google Cloud Console
            if not os.path.exists('credentials.json'):
                print("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print("üîß –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞: https://console.cloud.google.com/")
                print("üîß API & Services > Credentials > Create Credentials > OAuth 2.0")
                return None
            
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            credentials = flow.run_local_server(port=0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        with open(token_file, 'w') as token:
            token.write(credentials.to_json())
    
    return credentials


def get_drive_service():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Drive"""
    credentials = authenticate_google_drive()
    if not credentials:
        return None
    
    service = build('drive', 'v3', credentials=credentials)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    return service


def get_pdf_files_from_folder(service, folder_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏"""
    print(f"üîç –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ...")
    
    try:
        # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        query = f"'{folder_id}' in parents and mimeType='application/pdf' and trashed=false"
        results = service.files().list(
            q=query,
            fields="files(id, name, size)"
        ).execute()
        
        files = results.get('files', [])
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(files)}")
        
        return files
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return []


def download_file(service, file_id, file_name, download_folder):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        request = service.files().get_media(fileId=file_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path = download_folder / file_name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'wb') as file_handle:
            downloader = MediaIoBaseDownload(file_handle, request)
            done = False
            while done is False:
                status, done = downloader.next_chunk()
        
        return True, str(file_path)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {file_name}: {e}")
        return False, None


def download_all_pdfs():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö PDF"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    download_folder = setup_download_folder()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Drive
    service = get_drive_service()
    if not service:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Drive")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PDF —Ñ–∞–π–ª–æ–≤
    pdf_files = get_pdf_files_from_folder(service, GOOGLE_DRIVE_FOLDER_ID)
    if not pdf_files:
        print("üìÑ PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(pdf_files)} —Ñ–∞–π–ª–æ–≤...")
    
    successful_downloads = 0
    failed_downloads = []
    
    for file_info in tqdm(pdf_files, desc="–°–∫–∞—á–∏–≤–∞–Ω–∏–µ"):
        file_id = file_info['id']
        file_name = file_info['name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∞–Ω –ª–∏ —Ñ–∞–π–ª —É–∂–µ
        file_path = download_folder / file_name
        if file_path.exists():
            print(f"‚è≠Ô∏è  –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_name}")
            successful_downloads += 1
            continue
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        success, saved_path = download_file(service, file_id, file_name, download_folder)
        
        if success:
            successful_downloads += 1
            print(f"‚úÖ –°–∫–∞—á–∞–Ω: {file_name}")
        else:
            failed_downloads.append(file_name)
    
    # –ò—Ç–æ–≥–∏
    print("=" * 50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful_downloads} —Ñ–∞–π–ª–æ–≤")
    if failed_downloads:
        print(f"‚ùå –û—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(failed_downloads)} —Ñ–∞–π–ª–æ–≤")
        for failed_file in failed_downloads:
            print(f"   - {failed_file}")
    
    print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {download_folder.absolute()}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        download_all_pdfs()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞–º–∏ –∑–Ω–∞–Ω–∏–π
"""

import os
import sys
from pathlib import Path
import networkx as nx
from datetime import datetime

def show_graph_info(graph_file="longevity_knowledge_graph.graphml"):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ."""
    graph_path = Path(graph_file)
    
    if not graph_path.exists():
        print(f"‚ùå –ì—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω: {graph_path}")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ
        graph = nx.read_graphml(graph_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞
        file_size = graph_path.stat().st_size
        modified_time = datetime.fromtimestamp(graph_path.stat().st_mtime)
        
        print(f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–†–ê–§–ï: {graph_path}")
        print(f"   üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç ({file_size/1024:.1f} KB)")
        print(f"   üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {modified_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   üîó –£–∑–ª–æ–≤: {graph.number_of_nodes():,}")
        print(f"   üîó –†—ë–±–µ—Ä: {graph.number_of_edges():,}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É–∑–ª–æ–≤
        node_types = {}
        for node_id, data in graph.nodes(data=True):
            node_type = data.get('type', 'Unknown')
            node_types[node_type] = node_types.get(node_type, 0) + 1
        
        print(f"\n   üìã –¢–∏–ø—ã —É–∑–ª–æ–≤:")
        for node_type, count in sorted(node_types.items()):
            print(f"      ‚Ä¢ {node_type}: {count:,}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ä—ë–±–µ—Ä
        edge_types = {}
        for u, v, data in graph.edges(data=True):
            edge_type = data.get('type', 'Unknown')
            edge_types[edge_type] = edge_types.get(edge_type, 0) + 1
        
        print(f"\n   üîó –¢–∏–ø—ã —Å–≤—è–∑–µ–π:")
        for edge_type, count in sorted(edge_types.items()):
            print(f"      ‚Ä¢ {edge_type}: {count:,}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}")

def list_graph_files():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≥—Ä–∞—Ñ–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ."""
    current_dir = Path(".")
    graph_files = list(current_dir.glob("*.graphml"))
    
    if not graph_files:
        print("üìÅ –§–∞–π–ª—ã –≥—Ä–∞—Ñ–æ–≤ (*.graphml) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ")
        return
    
    print("üìÅ –ù–ê–ô–î–ï–ù–ù–´–ï –ì–†–ê–§–´:")
    for graph_file in sorted(graph_files):
        file_size = graph_file.stat().st_size
        modified_time = datetime.fromtimestamp(graph_file.stat().st_mtime)
        print(f"   ‚Ä¢ {graph_file.name}")
        print(f"     –†–∞–∑–º–µ—Ä: {file_size/1024:.1f} KB, –ò–∑–º–µ–Ω—ë–Ω: {modified_time.strftime('%Y-%m-%d %H:%M')}")

def delete_graph(graph_file="longevity_knowledge_graph.graphml"):
    """–£–¥–∞–ª—è–µ—Ç –≥—Ä–∞—Ñ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    graph_path = Path(graph_file)
    
    if not graph_path.exists():
        print(f"‚ùå –ì—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω: {graph_path}")
        return
    
    print(f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä–∞—Ñ: {graph_path}?")
    response = input("–í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").lower().strip()
    
    if response == 'yes':
        try:
            graph_path.unlink()
            print(f"‚úÖ –ì—Ä–∞—Ñ —É–¥–∞–ª—ë–Ω: {graph_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    else:
        print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

def backup_graph(graph_file="longevity_knowledge_graph.graphml"):
    """–°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≥—Ä–∞—Ñ–∞."""
    graph_path = Path(graph_file)
    
    if not graph_path.exists():
        print(f"‚ùå –ì—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω: {graph_path}")
        return
    
    # –°–æ–∑–¥–∞—ë–º –∏–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{graph_path.stem}_backup_{timestamp}.graphml"
    backup_path = graph_path.parent / backup_name
    
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        import shutil
        shutil.copy2(graph_path, backup_path)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ç–∏–ª–∏—Ç—ã."""
    if len(sys.argv) < 2:
        print("üîß –£–¢–ò–õ–ò–¢–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–†–ê–§–ê–ú–ò –ó–ù–ê–ù–ò–ô")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python graph_manager.py info [—Ñ–∞–π–ª.graphml]     - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞—Ñ–µ")
        print("  python graph_manager.py list                   - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–æ–≤")
        print("  python graph_manager.py delete [—Ñ–∞–π–ª.graphml]  - —É–¥–∞–ª–∏—Ç—å –≥—Ä–∞—Ñ")
        print("  python graph_manager.py backup [—Ñ–∞–π–ª.graphml]  - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        print("\n–ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: longevity_knowledge_graph.graphml")
        return
    
    command = sys.argv[1].lower()
    graph_file = sys.argv[2] if len(sys.argv) > 2 else "longevity_knowledge_graph.graphml"
    
    if command == "info":
        show_graph_info(graph_file)
    elif command == "list":
        list_graph_files()
    elif command == "delete":
        delete_graph(graph_file)
    elif command == "backup":
        backup_graph(graph_file)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: info, list, delete, backup")

if __name__ == "__main__":
    main() 